=== tests/cases/compiler/higherKindedTypesLift3.ts ===
interface StaticFunctor<CS<_TS>> {
>StaticFunctor : Symbol(StaticFunctor, Decl(higherKindedTypesLift3.ts, 0, 0))
>CS : Symbol(CS, Decl(higherKindedTypesLift3.ts, 0, 24))
>_TS : Symbol(_TS, Decl(higherKindedTypesLift3.ts, 0, 27))

    <AS, BS>(csas: CS<AS>, fmapstatic: (a: AS) => BS): CS<BS>;
>AS : Symbol(AS, Decl(higherKindedTypesLift3.ts, 1, 5))
>BS : Symbol(BS, Decl(higherKindedTypesLift3.ts, 1, 8))
>csas : Symbol(csas, Decl(higherKindedTypesLift3.ts, 1, 13))
>CS : Symbol(CS, Decl(higherKindedTypesLift3.ts, 0, 24))
>AS : Symbol(AS, Decl(higherKindedTypesLift3.ts, 1, 5))
>fmapstatic : Symbol(fmapstatic, Decl(higherKindedTypesLift3.ts, 1, 26))
>a : Symbol(a, Decl(higherKindedTypesLift3.ts, 1, 40))
>AS : Symbol(AS, Decl(higherKindedTypesLift3.ts, 1, 5))
>BS : Symbol(BS, Decl(higherKindedTypesLift3.ts, 1, 8))
>CS : Symbol(CS, Decl(higherKindedTypesLift3.ts, 0, 24))
>BS : Symbol(BS, Decl(higherKindedTypesLift3.ts, 1, 8))
}


interface LiftedResult<LC<_LT>> {
>LiftedResult : Symbol(LiftedResult, Decl(higherKindedTypesLift3.ts, 2, 1))
>LC : Symbol(LC, Decl(higherKindedTypesLift3.ts, 5, 23))
>_LT : Symbol(_LT, Decl(higherKindedTypesLift3.ts, 5, 26))

    <LA, LB>(lmap: (a: LA) => LB): (a: LC<LA>) => LC<LB>;
>LA : Symbol(LA, Decl(higherKindedTypesLift3.ts, 6, 5))
>LB : Symbol(LB, Decl(higherKindedTypesLift3.ts, 6, 8))
>lmap : Symbol(lmap, Decl(higherKindedTypesLift3.ts, 6, 13))
>a : Symbol(a, Decl(higherKindedTypesLift3.ts, 6, 20))
>LA : Symbol(LA, Decl(higherKindedTypesLift3.ts, 6, 5))
>LB : Symbol(LB, Decl(higherKindedTypesLift3.ts, 6, 8))
>a : Symbol(a, Decl(higherKindedTypesLift3.ts, 6, 36))
>LC : Symbol(LC, Decl(higherKindedTypesLift3.ts, 5, 23))
>LA : Symbol(LA, Decl(higherKindedTypesLift3.ts, 6, 5))
>LC : Symbol(LC, Decl(higherKindedTypesLift3.ts, 5, 23))
>LB : Symbol(LB, Decl(higherKindedTypesLift3.ts, 6, 8))
}

declare function lift<C<_T>>(fToLift: StaticFunctor<C>): LiftedResult<C>
>lift : Symbol(lift, Decl(higherKindedTypesLift3.ts, 7, 1))
>C : Symbol(C, Decl(higherKindedTypesLift3.ts, 9, 22))
>_T : Symbol(_T, Decl(higherKindedTypesLift3.ts, 9, 24))
>fToLift : Symbol(fToLift, Decl(higherKindedTypesLift3.ts, 9, 29))
>StaticFunctor : Symbol(StaticFunctor, Decl(higherKindedTypesLift3.ts, 0, 0))
>C : Symbol(C, Decl(higherKindedTypesLift3.ts, 9, 22))
>LiftedResult : Symbol(LiftedResult, Decl(higherKindedTypesLift3.ts, 2, 1))
>C : Symbol(C, Decl(higherKindedTypesLift3.ts, 9, 22))


declare const myArrayFunctor: StaticFunctor<Array>
>myArrayFunctor : Symbol(myArrayFunctor, Decl(higherKindedTypesLift3.ts, 12, 13))
>StaticFunctor : Symbol(StaticFunctor, Decl(higherKindedTypesLift3.ts, 0, 0))
>Array : Symbol(Array, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

const liftedArray = lift(myArrayFunctor);
>liftedArray : Symbol(liftedArray, Decl(higherKindedTypesLift3.ts, 14, 5))
>lift : Symbol(lift, Decl(higherKindedTypesLift3.ts, 7, 1))
>myArrayFunctor : Symbol(myArrayFunctor, Decl(higherKindedTypesLift3.ts, 12, 13))

declare function stringLength(strarg: string): number
>stringLength : Symbol(stringLength, Decl(higherKindedTypesLift3.ts, 14, 41))
>strarg : Symbol(strarg, Decl(higherKindedTypesLift3.ts, 16, 30))

const liftedStringLength = liftedArray(stringLength);
>liftedStringLength : Symbol(liftedStringLength, Decl(higherKindedTypesLift3.ts, 18, 5))
>liftedArray : Symbol(liftedArray, Decl(higherKindedTypesLift3.ts, 14, 5))
>stringLength : Symbol(stringLength, Decl(higherKindedTypesLift3.ts, 14, 41))

declare const arrayOfStrings: Array<string>;
>arrayOfStrings : Symbol(arrayOfStrings, Decl(higherKindedTypesLift3.ts, 20, 13))
>Array : Symbol(Array, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

const result = liftedStringLength(arrayOfStrings);
>result : Symbol(result, Decl(higherKindedTypesLift3.ts, 22, 5))
>liftedStringLength : Symbol(liftedStringLength, Decl(higherKindedTypesLift3.ts, 18, 5))
>arrayOfStrings : Symbol(arrayOfStrings, Decl(higherKindedTypesLift3.ts, 20, 13))

const expectedType: Array<number> = result;
>expectedType : Symbol(expectedType, Decl(higherKindedTypesLift3.ts, 23, 5))
>Array : Symbol(Array, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>result : Symbol(result, Decl(higherKindedTypesLift3.ts, 22, 5))

const expectError = liftedStringLength(result)
>expectError : Symbol(expectError, Decl(higherKindedTypesLift3.ts, 25, 5))
>liftedStringLength : Symbol(liftedStringLength, Decl(higherKindedTypesLift3.ts, 18, 5))
>result : Symbol(result, Decl(higherKindedTypesLift3.ts, 22, 5))



=== tests/cases/compiler/higherKindedTypesLift.ts ===
export interface Functor<AF, Container<_TF>> {
>Functor : Symbol(Functor, Decl(higherKindedTypesLift.ts, 0, 0))
>AF : Symbol(AF, Decl(higherKindedTypesLift.ts, 0, 25))
>Container : Symbol(Container, Decl(higherKindedTypesLift.ts, 0, 28))
>_TF : Symbol(_TF, Decl(higherKindedTypesLift.ts, 0, 39))

    map<BF>(f: (a: AF) => BF): Container<BF>;
>map : Symbol(Functor.map, Decl(higherKindedTypesLift.ts, 0, 46))
>BF : Symbol(BF, Decl(higherKindedTypesLift.ts, 1, 8))
>f : Symbol(f, Decl(higherKindedTypesLift.ts, 1, 12))
>a : Symbol(a, Decl(higherKindedTypesLift.ts, 1, 16))
>AF : Symbol(AF, Decl(higherKindedTypesLift.ts, 0, 25))
>BF : Symbol(BF, Decl(higherKindedTypesLift.ts, 1, 8))
>Container : Symbol(Container, Decl(higherKindedTypesLift.ts, 0, 28))
>BF : Symbol(BF, Decl(higherKindedTypesLift.ts, 1, 8))
}

class FunctorX<AX> implements Functor<AX, FunctorX> {
>FunctorX : Symbol(FunctorX, Decl(higherKindedTypesLift.ts, 2, 1))
>AX : Symbol(AX, Decl(higherKindedTypesLift.ts, 4, 15))
>Functor : Symbol(Functor, Decl(higherKindedTypesLift.ts, 0, 0))
>AX : Symbol(AX, Decl(higherKindedTypesLift.ts, 4, 15))
>FunctorX : Symbol(FunctorX, Decl(higherKindedTypesLift.ts, 2, 1))

    constructor(private elements: AX[]) {}
>elements : Symbol(FunctorX.elements, Decl(higherKindedTypesLift.ts, 5, 16))
>AX : Symbol(AX, Decl(higherKindedTypesLift.ts, 4, 15))

    map<BX>(f: (a: AX) => BX): FunctorX<BX> {
>map : Symbol(FunctorX.map, Decl(higherKindedTypesLift.ts, 5, 42))
>BX : Symbol(BX, Decl(higherKindedTypesLift.ts, 6, 8))
>f : Symbol(f, Decl(higherKindedTypesLift.ts, 6, 12))
>a : Symbol(a, Decl(higherKindedTypesLift.ts, 6, 16))
>AX : Symbol(AX, Decl(higherKindedTypesLift.ts, 4, 15))
>BX : Symbol(BX, Decl(higherKindedTypesLift.ts, 6, 8))
>FunctorX : Symbol(FunctorX, Decl(higherKindedTypesLift.ts, 2, 1))
>BX : Symbol(BX, Decl(higherKindedTypesLift.ts, 6, 8))

        const mappedElements = this.elements.map(f);
>mappedElements : Symbol(mappedElements, Decl(higherKindedTypesLift.ts, 7, 13))
>this.elements.map : Symbol(Array.map, Decl(lib.d.ts, --, --))
>this.elements : Symbol(FunctorX.elements, Decl(higherKindedTypesLift.ts, 5, 16))
>this : Symbol(FunctorX, Decl(higherKindedTypesLift.ts, 2, 1))
>elements : Symbol(FunctorX.elements, Decl(higherKindedTypesLift.ts, 5, 16))
>map : Symbol(Array.map, Decl(lib.d.ts, --, --))
>f : Symbol(f, Decl(higherKindedTypesLift.ts, 6, 12))

        return new FunctorX(mappedElements);
>FunctorX : Symbol(FunctorX, Decl(higherKindedTypesLift.ts, 2, 1))
>mappedElements : Symbol(mappedElements, Decl(higherKindedTypesLift.ts, 7, 13))
    }

    firstVal(): AX | undefined {
>firstVal : Symbol(FunctorX.firstVal, Decl(higherKindedTypesLift.ts, 9, 5))
>AX : Symbol(AX, Decl(higherKindedTypesLift.ts, 4, 15))

        return this.elements.length ? this.elements[0] : undefined;
>this.elements.length : Symbol(Array.length, Decl(lib.d.ts, --, --))
>this.elements : Symbol(FunctorX.elements, Decl(higherKindedTypesLift.ts, 5, 16))
>this : Symbol(FunctorX, Decl(higherKindedTypesLift.ts, 2, 1))
>elements : Symbol(FunctorX.elements, Decl(higherKindedTypesLift.ts, 5, 16))
>length : Symbol(Array.length, Decl(lib.d.ts, --, --))
>this.elements : Symbol(FunctorX.elements, Decl(higherKindedTypesLift.ts, 5, 16))
>this : Symbol(FunctorX, Decl(higherKindedTypesLift.ts, 2, 1))
>elements : Symbol(FunctorX.elements, Decl(higherKindedTypesLift.ts, 5, 16))
>undefined : Symbol(undefined)

    };
}


interface StaticFunctor<CS<_TS>> {
>StaticFunctor : Symbol(StaticFunctor, Decl(higherKindedTypesLift.ts, 14, 1))
>CS : Symbol(CS, Decl(higherKindedTypesLift.ts, 17, 24))
>_TS : Symbol(_TS, Decl(higherKindedTypesLift.ts, 17, 27))

    <AS, BS>(csas: CS<AS>, fmapstatic: (as: AS) => BS): CS<BS>;
>AS : Symbol(AS, Decl(higherKindedTypesLift.ts, 18, 5))
>BS : Symbol(BS, Decl(higherKindedTypesLift.ts, 18, 8))
>csas : Symbol(csas, Decl(higherKindedTypesLift.ts, 18, 13))
>CS : Symbol(CS, Decl(higherKindedTypesLift.ts, 17, 24))
>AS : Symbol(AS, Decl(higherKindedTypesLift.ts, 18, 5))
>fmapstatic : Symbol(fmapstatic, Decl(higherKindedTypesLift.ts, 18, 26))
>as : Symbol(as, Decl(higherKindedTypesLift.ts, 18, 40))
>AS : Symbol(AS, Decl(higherKindedTypesLift.ts, 18, 5))
>BS : Symbol(BS, Decl(higherKindedTypesLift.ts, 18, 8))
>CS : Symbol(CS, Decl(higherKindedTypesLift.ts, 17, 24))
>BS : Symbol(BS, Decl(higherKindedTypesLift.ts, 18, 8))
}


interface LiftedResult<LRC<_LT>> {
>LiftedResult : Symbol(LiftedResult, Decl(higherKindedTypesLift.ts, 19, 1))
>LRC : Symbol(LRC, Decl(higherKindedTypesLift.ts, 22, 23))
>_LT : Symbol(_LT, Decl(higherKindedTypesLift.ts, 22, 27))

    <LRA, LRB>(lrmap: (lra: LRA) => LRB): <NC<_NT> extends LRC<_NT>>(lrclra: NC<LRA>) => NC<LRB>
>LRA : Symbol(LRA, Decl(higherKindedTypesLift.ts, 23, 5))
>LRB : Symbol(LRB, Decl(higherKindedTypesLift.ts, 23, 9))
>lrmap : Symbol(lrmap, Decl(higherKindedTypesLift.ts, 23, 15))
>lra : Symbol(lra, Decl(higherKindedTypesLift.ts, 23, 23))
>LRA : Symbol(LRA, Decl(higherKindedTypesLift.ts, 23, 5))
>LRB : Symbol(LRB, Decl(higherKindedTypesLift.ts, 23, 9))
>NC : Symbol(NC, Decl(higherKindedTypesLift.ts, 23, 43))
>_NT : Symbol(_NT, Decl(higherKindedTypesLift.ts, 23, 46))
>LRC : Symbol(LRC, Decl(higherKindedTypesLift.ts, 22, 23))
>_NT : Symbol(_NT, Decl(higherKindedTypesLift.ts, 23, 46))
>lrclra : Symbol(lrclra, Decl(higherKindedTypesLift.ts, 23, 69))
>NC : Symbol(NC, Decl(higherKindedTypesLift.ts, 23, 43))
>LRA : Symbol(LRA, Decl(higherKindedTypesLift.ts, 23, 5))
>NC : Symbol(NC, Decl(higherKindedTypesLift.ts, 23, 43))
>LRB : Symbol(LRB, Decl(higherKindedTypesLift.ts, 23, 9))
}

function lift<C<_TL>>(fToLift: StaticFunctor<C>): LiftedResult<C> {
>lift : Symbol(lift, Decl(higherKindedTypesLift.ts, 24, 1))
>C : Symbol(C, Decl(higherKindedTypesLift.ts, 26, 14))
>_TL : Symbol(_TL, Decl(higherKindedTypesLift.ts, 26, 16))
>fToLift : Symbol(fToLift, Decl(higherKindedTypesLift.ts, 26, 22))
>StaticFunctor : Symbol(StaticFunctor, Decl(higherKindedTypesLift.ts, 14, 1))
>C : Symbol(C, Decl(higherKindedTypesLift.ts, 26, 14))
>LiftedResult : Symbol(LiftedResult, Decl(higherKindedTypesLift.ts, 19, 1))
>C : Symbol(C, Decl(higherKindedTypesLift.ts, 26, 14))

    return lmap => lca => fToLift(lca, lmap);
>lmap : Symbol(lmap, Decl(higherKindedTypesLift.ts, 27, 10))
>lca : Symbol(lca, Decl(higherKindedTypesLift.ts, 27, 18))
>fToLift : Symbol(fToLift, Decl(higherKindedTypesLift.ts, 26, 22))
>lca : Symbol(lca, Decl(higherKindedTypesLift.ts, 27, 18))
>lmap : Symbol(lmap, Decl(higherKindedTypesLift.ts, 27, 10))
}

function staticMap<C1<_T1> extends Functor<_T1, C1>, A1, B1>(fa1: C1<A1>, fmap1: (a1: A1) => B1): C1<B1> {
>staticMap : Symbol(staticMap, Decl(higherKindedTypesLift.ts, 28, 1))
>C1 : Symbol(C1, Decl(higherKindedTypesLift.ts, 30, 19))
>_T1 : Symbol(_T1, Decl(higherKindedTypesLift.ts, 30, 22))
>Functor : Symbol(Functor, Decl(higherKindedTypesLift.ts, 0, 0))
>_T1 : Symbol(_T1, Decl(higherKindedTypesLift.ts, 30, 22))
>C1 : Symbol(C1, Decl(higherKindedTypesLift.ts, 30, 19))
>A1 : Symbol(A1, Decl(higherKindedTypesLift.ts, 30, 52))
>B1 : Symbol(B1, Decl(higherKindedTypesLift.ts, 30, 56))
>fa1 : Symbol(fa1, Decl(higherKindedTypesLift.ts, 30, 61))
>C1 : Symbol(C1, Decl(higherKindedTypesLift.ts, 30, 19))
>A1 : Symbol(A1, Decl(higherKindedTypesLift.ts, 30, 52))
>fmap1 : Symbol(fmap1, Decl(higherKindedTypesLift.ts, 30, 73))
>a1 : Symbol(a1, Decl(higherKindedTypesLift.ts, 30, 82))
>A1 : Symbol(A1, Decl(higherKindedTypesLift.ts, 30, 52))
>B1 : Symbol(B1, Decl(higherKindedTypesLift.ts, 30, 56))
>C1 : Symbol(C1, Decl(higherKindedTypesLift.ts, 30, 19))
>B1 : Symbol(B1, Decl(higherKindedTypesLift.ts, 30, 56))

    return fa1.map(fmap1);
>fa1.map : Symbol(Functor.map, Decl(higherKindedTypesLift.ts, 0, 46))
>fa1 : Symbol(fa1, Decl(higherKindedTypesLift.ts, 30, 61))
>map : Symbol(Functor.map, Decl(higherKindedTypesLift.ts, 0, 46))
>fmap1 : Symbol(fmap1, Decl(higherKindedTypesLift.ts, 30, 73))
}

const liftedFunctor = lift(staticMap);
>liftedFunctor : Symbol(liftedFunctor, Decl(higherKindedTypesLift.ts, 34, 5))
>lift : Symbol(lift, Decl(higherKindedTypesLift.ts, 24, 1))
>staticMap : Symbol(staticMap, Decl(higherKindedTypesLift.ts, 28, 1))

function stringLength(strarg: string): number {
>stringLength : Symbol(stringLength, Decl(higherKindedTypesLift.ts, 34, 38))
>strarg : Symbol(strarg, Decl(higherKindedTypesLift.ts, 36, 22))

    return strarg.length;
>strarg.length : Symbol(String.length, Decl(lib.d.ts, --, --))
>strarg : Symbol(strarg, Decl(higherKindedTypesLift.ts, 36, 22))
>length : Symbol(String.length, Decl(lib.d.ts, --, --))
}

const liftedStringLength = liftedFunctor(stringLength);
>liftedStringLength : Symbol(liftedStringLength, Decl(higherKindedTypesLift.ts, 40, 5))
>liftedFunctor : Symbol(liftedFunctor, Decl(higherKindedTypesLift.ts, 34, 5))
>stringLength : Symbol(stringLength, Decl(higherKindedTypesLift.ts, 34, 38))

const functorXString = new FunctorX(["myFunctorX"]);
>functorXString : Symbol(functorXString, Decl(higherKindedTypesLift.ts, 42, 5))
>FunctorX : Symbol(FunctorX, Decl(higherKindedTypesLift.ts, 2, 1))

const result = liftedStringLength(functorXString);
>result : Symbol(result, Decl(higherKindedTypesLift.ts, 44, 5))
>liftedStringLength : Symbol(liftedStringLength, Decl(higherKindedTypesLift.ts, 40, 5))
>functorXString : Symbol(functorXString, Decl(higherKindedTypesLift.ts, 42, 5))

const expectedType: FunctorX<number> = result;
>expectedType : Symbol(expectedType, Decl(higherKindedTypesLift.ts, 45, 5))
>FunctorX : Symbol(FunctorX, Decl(higherKindedTypesLift.ts, 2, 1))
>result : Symbol(result, Decl(higherKindedTypesLift.ts, 44, 5))

const expectError = liftedStringLength(result);
>expectError : Symbol(expectError, Decl(higherKindedTypesLift.ts, 47, 5))
>liftedStringLength : Symbol(liftedStringLength, Decl(higherKindedTypesLift.ts, 40, 5))
>result : Symbol(result, Decl(higherKindedTypesLift.ts, 44, 5))



export interface DiffFunctor<DA, DContainer<_TD>> {
>DiffFunctor : Symbol(DiffFunctor, Decl(higherKindedTypesLift.ts, 47, 47))
>DA : Symbol(DA, Decl(higherKindedTypesLift.ts, 51, 29))
>DContainer : Symbol(DContainer, Decl(higherKindedTypesLift.ts, 51, 32))
>_TD : Symbol(_TD, Decl(higherKindedTypesLift.ts, 51, 44))

    diffMap<DB>(df: (da: DA) => DB): DContainer<DB>;
>diffMap : Symbol(DiffFunctor.diffMap, Decl(higherKindedTypesLift.ts, 51, 51))
>DB : Symbol(DB, Decl(higherKindedTypesLift.ts, 52, 12))
>df : Symbol(df, Decl(higherKindedTypesLift.ts, 52, 16))
>da : Symbol(da, Decl(higherKindedTypesLift.ts, 52, 21))
>DA : Symbol(DA, Decl(higherKindedTypesLift.ts, 51, 29))
>DB : Symbol(DB, Decl(higherKindedTypesLift.ts, 52, 12))
>DContainer : Symbol(DContainer, Decl(higherKindedTypesLift.ts, 51, 32))
>DB : Symbol(DB, Decl(higherKindedTypesLift.ts, 52, 12))
}

declare class DiffFunctorY<AY> implements DiffFunctor<AY, DiffFunctorY> {
>DiffFunctorY : Symbol(DiffFunctorY, Decl(higherKindedTypesLift.ts, 53, 1))
>AY : Symbol(AY, Decl(higherKindedTypesLift.ts, 55, 27))
>DiffFunctor : Symbol(DiffFunctor, Decl(higherKindedTypesLift.ts, 47, 47))
>AY : Symbol(AY, Decl(higherKindedTypesLift.ts, 55, 27))
>DiffFunctorY : Symbol(DiffFunctorY, Decl(higherKindedTypesLift.ts, 53, 1))

    diffMap<BY>(f: (a: AY) => BY): DiffFunctorY<BY>
>diffMap : Symbol(DiffFunctorY.diffMap, Decl(higherKindedTypesLift.ts, 55, 73))
>BY : Symbol(BY, Decl(higherKindedTypesLift.ts, 57, 12))
>f : Symbol(f, Decl(higherKindedTypesLift.ts, 57, 16))
>a : Symbol(a, Decl(higherKindedTypesLift.ts, 57, 20))
>AY : Symbol(AY, Decl(higherKindedTypesLift.ts, 55, 27))
>BY : Symbol(BY, Decl(higherKindedTypesLift.ts, 57, 12))
>DiffFunctorY : Symbol(DiffFunctorY, Decl(higherKindedTypesLift.ts, 53, 1))
>BY : Symbol(BY, Decl(higherKindedTypesLift.ts, 57, 12))

    firstValY(): AY | undefined
>firstValY : Symbol(DiffFunctorY.firstValY, Decl(higherKindedTypesLift.ts, 57, 51))
>AY : Symbol(AY, Decl(higherKindedTypesLift.ts, 55, 27))
}

declare const diffFunctorYString: DiffFunctorY<string>;
>diffFunctorYString : Symbol(diffFunctorYString, Decl(higherKindedTypesLift.ts, 62, 13))
>DiffFunctorY : Symbol(DiffFunctorY, Decl(higherKindedTypesLift.ts, 53, 1))

// should have error because DiffFunctorY has diffMap function, not "map" as needed because liftedFunctor was created from staticMap which declared Functor
const expectError2 = liftedStringLength(diffFunctorYString);
>expectError2 : Symbol(expectError2, Decl(higherKindedTypesLift.ts, 64, 5))
>liftedStringLength : Symbol(liftedStringLength, Decl(higherKindedTypesLift.ts, 40, 5))
>diffFunctorYString : Symbol(diffFunctorYString, Decl(higherKindedTypesLift.ts, 62, 13))


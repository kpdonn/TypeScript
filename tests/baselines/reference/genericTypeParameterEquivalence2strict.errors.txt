tests/cases/compiler/genericTypeParameterEquivalence2strict.ts(41,22): error TS2345: Argument of type '<A>(f: (a: A) => boolean, ar: A[]) => A[]' is not assignable to parameter of type '(a: {}, b: {}) => {}[]'.
  Types of parameters 'f' and 'a' are incompatible.
    Type '{}' is not assignable to type '(a: {}) => boolean'.
      Type '{}' provides no match for the signature '(a: {}): boolean'.
tests/cases/compiler/genericTypeParameterEquivalence2strict.ts(59,20): error TS2345: Argument of type '<A>(ar: A[]) => number' is not assignable to parameter of type '(b: {}) => number'.
  Types of parameters 'ar' and 'b' are incompatible.
    Type '{}' is not assignable to type '{}[]'.
      Property 'length' is missing in type '{}'.
tests/cases/compiler/genericTypeParameterEquivalence2strict.ts(64,20): error TS2345: Argument of type '<A>(ar: A[]) => number' is not assignable to parameter of type '(b: {}) => number'.


==== tests/cases/compiler/genericTypeParameterEquivalence2strict.ts (3 errors) ====
    // compose :: (b->c) -> (a->b) -> (a->c)
    function compose<A, B, C>(f: (b: B) => C, g: (a:A) => B): (a:A) => C {
        return function (a:A) : C {
            return f(g.apply(null, a));
        };
    }
    
    // forEach :: [a] -> (a -> ()) -> ()
    function forEach<A>(list: A[], f: (a: A, n?: number) => void ): void {
        for (var i = 0; i < list.length; ++i) {
            f(list[i], i);
        }
    }
    
    // filter :: (a->bool) -> [a] -> [a]
    function filter<A>(f: (a: A) => boolean, ar: A[]): A[] {
        var ret: A[] = [];
        forEach(ar, (el) => {
            if (f(el)) {
                ret.push(el);
            }
        } );
    
        return ret;
    }
    
    // length :: [a] -> Num
    function length2<A>(ar: A[]): number {
        return ar.length;
    }
    
    // curry1 :: ((a,b)->c) -> (a->(b->c))
    function curry1<A, B, C>(f: (a: A, b: B) => C): (ax: A) => (bx: B) => C {
        return function (ay: A) {
            return function (by: B) {
                return f(ay, by);
            };
        };
    }
    
    var cfilter = curry1(filter);
                         ~~~~~~
!!! error TS2345: Argument of type '<A>(f: (a: A) => boolean, ar: A[]) => A[]' is not assignable to parameter of type '(a: {}, b: {}) => {}[]'.
!!! error TS2345:   Types of parameters 'f' and 'a' are incompatible.
!!! error TS2345:     Type '{}' is not assignable to type '(a: {}) => boolean'.
!!! error TS2345:       Type '{}' provides no match for the signature '(a: {}): boolean'.
    
    declare function strBool(str: string): boolean
    const filterer = cfilter(strBool);
    const expectFilterer: (a: string[]) => string[] = filterer;
    
    const filtered = filterer(["hello"]);
    const expectFiltered: string[] = filtered;
    
    // compose :: (b->c) -> (a->b) -> (a->c)
    // length :: [a] -> Num
    // cfilter :: {} -> {} -> [{}]
    // pred :: a -> Bool 
    // cfilter(pred) :: {} -> [{}]
    // length2 :: [a] -> Num
    // countWhere :: (a -> Bool) -> [a] -> Num
    
    function countWhere_1<A>(pred: (a: A) => boolean): (a: A[]) => number {
        return compose(length2, cfilter(pred));
                       ~~~~~~~
!!! error TS2345: Argument of type '<A>(ar: A[]) => number' is not assignable to parameter of type '(b: {}) => number'.
!!! error TS2345:   Types of parameters 'ar' and 'b' are incompatible.
!!! error TS2345:     Type '{}' is not assignable to type '{}[]'.
!!! error TS2345:       Property 'length' is missing in type '{}'.
    }
    
    function countWhere_2<A>(pred: (a: A) => boolean): (a: A[]) => number {
        var where = cfilter(pred);
        return compose(length2, where);
                       ~~~~~~~
!!! error TS2345: Argument of type '<A>(ar: A[]) => number' is not assignable to parameter of type '(b: {}) => number'.
    }
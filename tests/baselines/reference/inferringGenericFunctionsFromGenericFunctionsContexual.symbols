=== tests/cases/compiler/inferringGenericFunctionsFromGenericFunctionsContexual.ts ===
export {}

declare function identity1<T, U>(f: (t: T) => U): (t2: T) => U
>identity1 : Symbol(identity1, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 0, 9))
>T : Symbol(T, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 2, 27))
>U : Symbol(U, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 2, 29))
>f : Symbol(f, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 2, 33))
>t : Symbol(t, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 2, 37))
>T : Symbol(T, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 2, 27))
>U : Symbol(U, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 2, 29))
>t2 : Symbol(t2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 2, 51))
>T : Symbol(T, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 2, 27))
>U : Symbol(U, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 2, 29))

const id1 = identity1(x => x)
>id1 : Symbol(id1, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 3, 5))
>identity1 : Symbol(identity1, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 0, 9))
>x : Symbol(x, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 3, 22))
>x : Symbol(x, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 3, 22))


declare function identity2<T>(f: T): T
>identity2 : Symbol(identity2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 3, 29))
>T : Symbol(T, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 6, 27))
>f : Symbol(f, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 6, 30))
>T : Symbol(T, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 6, 27))
>T : Symbol(T, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 6, 27))

const id2 = identity2(x => x)
>id2 : Symbol(id2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 7, 5))
>identity2 : Symbol(identity2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 3, 29))
>x : Symbol(x, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 7, 22))
>x : Symbol(x, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 7, 22))


declare function identity3<T extends number, U>(f: (t: T) => U): (t2: T) => U
>identity3 : Symbol(identity3, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 7, 29))
>T : Symbol(T, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 10, 27))
>U : Symbol(U, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 10, 44))
>f : Symbol(f, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 10, 48))
>t : Symbol(t, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 10, 52))
>T : Symbol(T, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 10, 27))
>U : Symbol(U, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 10, 44))
>t2 : Symbol(t2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 10, 66))
>T : Symbol(T, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 10, 27))
>U : Symbol(U, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 10, 44))

const id3 = identity3(x => x)
>id3 : Symbol(id3, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 11, 5))
>identity3 : Symbol(identity3, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 7, 29))
>x : Symbol(x, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 11, 22))
>x : Symbol(x, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 11, 22))





declare function compose<A, B, C>(f: (x: A) => B, g: (y: B) => C): (x: A) => C;
>compose : Symbol(compose, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 11, 29))
>A : Symbol(A, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 17, 25))
>B : Symbol(B, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 17, 27))
>C : Symbol(C, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 17, 30))
>f : Symbol(f, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 17, 34))
>x : Symbol(x, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 17, 38))
>A : Symbol(A, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 17, 25))
>B : Symbol(B, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 17, 27))
>g : Symbol(g, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 17, 49))
>y : Symbol(y, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 17, 54))
>B : Symbol(B, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 17, 27))
>C : Symbol(C, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 17, 30))
>x : Symbol(x, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 17, 68))
>A : Symbol(A, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 17, 25))
>C : Symbol(C, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 17, 30))

{
    let composed1 = compose(x => x, x2 => x2)
>composed1 : Symbol(composed1, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 20, 7))
>compose : Symbol(compose, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 11, 29))
>x : Symbol(x, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 20, 28))
>x : Symbol(x, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 20, 28))
>x2 : Symbol(x2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 20, 35))
>x2 : Symbol(x2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 20, 35))

    const expectedComposed1: <U>(u: U) => U = composed1;
>expectedComposed1 : Symbol(expectedComposed1, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 21, 9))
>U : Symbol(U, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 21, 30))
>u : Symbol(u, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 21, 33))
>U : Symbol(U, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 21, 30))
>U : Symbol(U, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 21, 30))
>composed1 : Symbol(composed1, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 20, 7))

    const callComposed1 = composed1("test");
>callComposed1 : Symbol(callComposed1, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 22, 9))
>composed1 : Symbol(composed1, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 20, 7))

    const expectedCallComposed1 : string = callComposed1;
>expectedCallComposed1 : Symbol(expectedCallComposed1, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 23, 9))
>callComposed1 : Symbol(callComposed1, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 22, 9))
}

{
    let composed2 = compose(x => x, x2 => [x2])
>composed2 : Symbol(composed2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 27, 7))
>compose : Symbol(compose, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 11, 29))
>x : Symbol(x, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 27, 28))
>x : Symbol(x, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 27, 28))
>x2 : Symbol(x2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 27, 35))
>x2 : Symbol(x2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 27, 35))

    const expectedComposed2: <U>(u: U) => U[] = composed2;
>expectedComposed2 : Symbol(expectedComposed2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 28, 9))
>U : Symbol(U, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 28, 30))
>u : Symbol(u, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 28, 33))
>U : Symbol(U, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 28, 30))
>U : Symbol(U, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 28, 30))
>composed2 : Symbol(composed2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 27, 7))

    const callComposed2 = composed2("test");
>callComposed2 : Symbol(callComposed2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 29, 9))
>composed2 : Symbol(composed2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 27, 7))

    const expectedCallComposed2: string[] = callComposed2;
>expectedCallComposed2 : Symbol(expectedCallComposed2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 30, 9))
>callComposed2 : Symbol(callComposed2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 29, 9))
}

{
    let composed3 = compose(x => [x], x2 => x2)
>composed3 : Symbol(composed3, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 34, 7))
>compose : Symbol(compose, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 11, 29))
>x : Symbol(x, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 34, 28))
>x : Symbol(x, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 34, 28))
>x2 : Symbol(x2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 34, 37))
>x2 : Symbol(x2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 34, 37))

    const expectedComposed3: <U>(u: U) => U[] = composed3;
>expectedComposed3 : Symbol(expectedComposed3, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 35, 9))
>U : Symbol(U, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 35, 30))
>u : Symbol(u, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 35, 33))
>U : Symbol(U, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 35, 30))
>U : Symbol(U, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 35, 30))
>composed3 : Symbol(composed3, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 34, 7))

    const callComposed3 = composed3("test");
>callComposed3 : Symbol(callComposed3, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 36, 9))
>composed3 : Symbol(composed3, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 34, 7))

    const expectedCallComposed3 : string[] = callComposed3;
>expectedCallComposed3 : Symbol(expectedCallComposed3, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 37, 9))
>callComposed3 : Symbol(callComposed3, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 36, 9))
}

{
    let composed4 = compose(x => [x], x2 => ({ boxed: x2 }));
>composed4 : Symbol(composed4, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 41, 7))
>compose : Symbol(compose, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 11, 29))
>x : Symbol(x, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 41, 28))
>x : Symbol(x, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 41, 28))
>x2 : Symbol(x2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 41, 37))
>boxed : Symbol(boxed, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 41, 46))
>x2 : Symbol(x2, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 41, 37))

    const expectedComposed4: <U>(u: U) => {boxed: U[]} = composed4;
>expectedComposed4 : Symbol(expectedComposed4, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 42, 9))
>U : Symbol(U, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 42, 30))
>u : Symbol(u, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 42, 33))
>U : Symbol(U, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 42, 30))
>boxed : Symbol(boxed, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 42, 43))
>U : Symbol(U, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 42, 30))
>composed4 : Symbol(composed4, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 41, 7))

    const callComposed4 = composed4("test");
>callComposed4 : Symbol(callComposed4, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 43, 9))
>composed4 : Symbol(composed4, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 41, 7))

    const expectedCallComposed4 : {boxed: string[]} = callComposed4;
>expectedCallComposed4 : Symbol(expectedCallComposed4, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 44, 9))
>boxed : Symbol(boxed, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 44, 35))
>callComposed4 : Symbol(callComposed4, Decl(inferringGenericFunctionsFromGenericFunctionsContexual.ts, 43, 9))
}


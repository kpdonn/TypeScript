tests/cases/compiler/inferringGenericFunctionsFromGenericFunctionsContexual.ts(17,11): error TS2322: Type '(a2: {}) => {}' is not assignable to type '<U>(u: U) => U'.
  Type '{}' is not assignable to type 'U'.
tests/cases/compiler/inferringGenericFunctionsFromGenericFunctionsContexual.ts(19,11): error TS2322: Type '{}' is not assignable to type 'string'.
tests/cases/compiler/inferringGenericFunctionsFromGenericFunctionsContexual.ts(24,11): error TS2322: Type '(a2: {}) => {}[]' is not assignable to type '<U>(u: U) => U[]'.
  Type '{}[]' is not assignable to type 'U[]'.
    Type '{}' is not assignable to type 'U'.
tests/cases/compiler/inferringGenericFunctionsFromGenericFunctionsContexual.ts(26,11): error TS2322: Type '{}[]' is not assignable to type 'string[]'.
  Type '{}' is not assignable to type 'string'.
tests/cases/compiler/inferringGenericFunctionsFromGenericFunctionsContexual.ts(31,11): error TS2322: Type '(a2: {}) => {}[]' is not assignable to type '<U>(u: U) => U[]'.
  Type '{}[]' is not assignable to type 'U[]'.
    Type '{}' is not assignable to type 'U'.
tests/cases/compiler/inferringGenericFunctionsFromGenericFunctionsContexual.ts(33,11): error TS2322: Type '{}[]' is not assignable to type 'string[]'.
tests/cases/compiler/inferringGenericFunctionsFromGenericFunctionsContexual.ts(38,11): error TS2322: Type '(a2: {}) => { boxed: {}[]; }' is not assignable to type '<U>(u: U) => { boxed: U[]; }'.
  Type '{ boxed: {}[]; }' is not assignable to type '{ boxed: U[]; }'.
    Types of property 'boxed' are incompatible.
      Type '{}[]' is not assignable to type 'U[]'.
        Type '{}' is not assignable to type 'U'.
tests/cases/compiler/inferringGenericFunctionsFromGenericFunctionsContexual.ts(40,11): error TS2322: Type '{ boxed: {}[]; }' is not assignable to type '{ boxed: string[]; }'.
  Types of property 'boxed' are incompatible.
    Type '{}[]' is not assignable to type 'string[]'.
tests/cases/compiler/inferringGenericFunctionsFromGenericFunctionsContexual.ts(45,11): error TS2322: Type '(d2: {}) => [{}, { boxed: string; }]' is not assignable to type '<U>(u: U) => [U, { boxed: string; }]'.
  Type '[{}, { boxed: string; }]' is not assignable to type '[U, { boxed: string; }]'.
    Type '{}' is not assignable to type 'U'.
tests/cases/compiler/inferringGenericFunctionsFromGenericFunctionsContexual.ts(47,11): error TS2322: Type '[{}, { boxed: string; }]' is not assignable to type '[number, { boxed: string; }]'.
  Type '{}' is not assignable to type 'number'.
tests/cases/compiler/inferringGenericFunctionsFromGenericFunctionsContexual.ts(56,36): error TS2345: Argument of type '(x: string) => string' is not assignable to parameter of type '(b1: {}) => string'.
  Types of parameters 'x' and 'b1' are incompatible.
    Type '{}' is not assignable to type 'string'.
tests/cases/compiler/inferringGenericFunctionsFromGenericFunctionsContexual.ts(63,37): error TS2345: Argument of type '(x2: string) => string[]' is not assignable to parameter of type '(b1: {}) => string[]'.
  Types of parameters 'x2' and 'b1' are incompatible.
    Type '{}' is not assignable to type 'string'.
tests/cases/compiler/inferringGenericFunctionsFromGenericFunctionsContexual.ts(70,37): error TS2345: Argument of type '(x2: string) => string' is not assignable to parameter of type '(b1: {}[]) => string'.
  Types of parameters 'x2' and 'b1' are incompatible.
    Type '{}[]' is not assignable to type 'string'.
tests/cases/compiler/inferringGenericFunctionsFromGenericFunctionsContexual.ts(77,37): error TS2345: Argument of type '(x2: string) => { boxed: string; }' is not assignable to parameter of type '(b1: {}[]) => { boxed: string; }'.
  Types of parameters 'x2' and 'b1' are incompatible.
    Type '{}[]' is not assignable to type 'string'.
tests/cases/compiler/inferringGenericFunctionsFromGenericFunctionsContexual.ts(85,11): error TS2322: Type '(d2: {}) => [{}, { boxed: string; }]' is not assignable to type '<U>(u: U) => [U, { boxed: string; }]'.
  Type '[{}, { boxed: string; }]' is not assignable to type '[U, { boxed: string; }]'.
    Type '{}' is not assignable to type 'U'.
tests/cases/compiler/inferringGenericFunctionsFromGenericFunctionsContexual.ts(87,11): error TS2322: Type '[{}, { boxed: string; }]' is not assignable to type '[number, { boxed: string; }]'.
  Type '{}' is not assignable to type 'number'.


==== tests/cases/compiler/inferringGenericFunctionsFromGenericFunctionsContexual.ts (16 errors) ====
    export {}
    
    declare function identity1<T, U>(f: (t: T) => U): (t2: T) => U
    const id1 = identity1(x => x)
    
    
    declare function identity2<T extends number, U>(f: (t: T) => U): (t2: T) => U
    const id2 = identity2(x => x)
    
    
    // compose<D, E extends string, F> is just something I put in to make sure the contextual types handle multiple signatures.
    declare function compose<D, E extends string, F>(f: (d: D) => E, g: (e: E) => F): (d2: D) => [D, F];
    declare function compose<A, B, C>(f: (a1: A) => B, g: (b1: B) => C): (a2: A) => C;
    
    {
        let composed1 = compose(x => x, x2 => x2)
        const expectedComposed1: <U>(u: U) => U = composed1;
              ~~~~~~~~~~~~~~~~~
!!! error TS2322: Type '(a2: {}) => {}' is not assignable to type '<U>(u: U) => U'.
!!! error TS2322:   Type '{}' is not assignable to type 'U'.
        const callComposed1 = composed1("test");
        const expectedCallComposed1 : string = callComposed1;
              ~~~~~~~~~~~~~~~~~~~~~
!!! error TS2322: Type '{}' is not assignable to type 'string'.
    }
    
    {
        let composed2 = compose(x => x, x2 => [x2])
        const expectedComposed2: <U>(u: U) => U[] = composed2;
              ~~~~~~~~~~~~~~~~~
!!! error TS2322: Type '(a2: {}) => {}[]' is not assignable to type '<U>(u: U) => U[]'.
!!! error TS2322:   Type '{}[]' is not assignable to type 'U[]'.
!!! error TS2322:     Type '{}' is not assignable to type 'U'.
        const callComposed2 = composed2("test");
        const expectedCallComposed2: string[] = callComposed2;
              ~~~~~~~~~~~~~~~~~~~~~
!!! error TS2322: Type '{}[]' is not assignable to type 'string[]'.
!!! error TS2322:   Type '{}' is not assignable to type 'string'.
    }
    
    {
        let composed3 = compose(x => [x], x2 => x2)
        const expectedComposed3: <U>(u: U) => U[] = composed3;
              ~~~~~~~~~~~~~~~~~
!!! error TS2322: Type '(a2: {}) => {}[]' is not assignable to type '<U>(u: U) => U[]'.
!!! error TS2322:   Type '{}[]' is not assignable to type 'U[]'.
!!! error TS2322:     Type '{}' is not assignable to type 'U'.
        const callComposed3 = composed3("test");
        const expectedCallComposed3 : string[] = callComposed3;
              ~~~~~~~~~~~~~~~~~~~~~
!!! error TS2322: Type '{}[]' is not assignable to type 'string[]'.
    }
    
    {
        let composed4 = compose(x => [x], x2 => ({ boxed: x2 }));
        const expectedComposed4: <U>(u: U) => {boxed: U[]} = composed4;
              ~~~~~~~~~~~~~~~~~
!!! error TS2322: Type '(a2: {}) => { boxed: {}[]; }' is not assignable to type '<U>(u: U) => { boxed: U[]; }'.
!!! error TS2322:   Type '{ boxed: {}[]; }' is not assignable to type '{ boxed: U[]; }'.
!!! error TS2322:     Types of property 'boxed' are incompatible.
!!! error TS2322:       Type '{}[]' is not assignable to type 'U[]'.
!!! error TS2322:         Type '{}' is not assignable to type 'U'.
        const callComposed4 = composed4("test");
        const expectedCallComposed4 : {boxed: string[]} = callComposed4;
              ~~~~~~~~~~~~~~~~~~~~~
!!! error TS2322: Type '{ boxed: {}[]; }' is not assignable to type '{ boxed: string[]; }'.
!!! error TS2322:   Types of property 'boxed' are incompatible.
!!! error TS2322:     Type '{}[]' is not assignable to type 'string[]'.
    }
    
    {
        let composed5 = compose(x => "" + x, x2 => ({ boxed: x2 }));
        const expectedComposed5: <U>(u: U) => [U, {boxed: string}] = composed5;
              ~~~~~~~~~~~~~~~~~
!!! error TS2322: Type '(d2: {}) => [{}, { boxed: string; }]' is not assignable to type '<U>(u: U) => [U, { boxed: string; }]'.
!!! error TS2322:   Type '[{}, { boxed: string; }]' is not assignable to type '[U, { boxed: string; }]'.
!!! error TS2322:     Type '{}' is not assignable to type 'U'.
        const callComposed5 = composed5(123456);
        const expectedCallComposed5 : [number, {boxed: string}] = callComposed5;
              ~~~~~~~~~~~~~~~~~~~~~
!!! error TS2322: Type '[{}, { boxed: string; }]' is not assignable to type '[number, { boxed: string; }]'.
!!! error TS2322:   Type '{}' is not assignable to type 'number'.
    }
    
    
    declare function composeReverse<D, E extends string, F>(g: (e: E) => F, f: (d: D) => E): (d2: D) => [D, F];
    declare function composeReverse<A, B, C>(g: (b1: B) => C, f: (a1: A) => B): (a2: A) => C;
    
    
    {
        let composed1 = composeReverse(x => x, x2 => x2)
                                       ~~~~~~
!!! error TS2345: Argument of type '(x: string) => string' is not assignable to parameter of type '(b1: {}) => string'.
!!! error TS2345:   Types of parameters 'x' and 'b1' are incompatible.
!!! error TS2345:     Type '{}' is not assignable to type 'string'.
        const expectedComposed1: <U>(u: U) => U = composed1;
        const callComposed1 = composed1("test");
        const expectedCallComposed1 : string = callComposed1;
    }
    
    {
        let composed2 = composeReverse( x2 => [x2], x => x)
                                        ~~~~~~~~~~
!!! error TS2345: Argument of type '(x2: string) => string[]' is not assignable to parameter of type '(b1: {}) => string[]'.
!!! error TS2345:   Types of parameters 'x2' and 'b1' are incompatible.
!!! error TS2345:     Type '{}' is not assignable to type 'string'.
        const expectedComposed2: <U>(u: U) => U[] = composed2;
        const callComposed2 = composed2("test");
        const expectedCallComposed2: string[] = callComposed2;
    }
    
    {
        let composed3 = composeReverse( x2 => x2, x => [x])
                                        ~~~~~~~~
!!! error TS2345: Argument of type '(x2: string) => string' is not assignable to parameter of type '(b1: {}[]) => string'.
!!! error TS2345:   Types of parameters 'x2' and 'b1' are incompatible.
!!! error TS2345:     Type '{}[]' is not assignable to type 'string'.
        const expectedComposed3: <U>(u: U) => U[] = composed3;
        const callComposed3 = composed3("test");
        const expectedCallComposed3 : string[] = callComposed3;
    }
    
    {
        let composed4 = composeReverse( x2 => ({ boxed: x2 }), x => [x]);
                                        ~~~~~~~~~~~~~~~~~~~~~
!!! error TS2345: Argument of type '(x2: string) => { boxed: string; }' is not assignable to parameter of type '(b1: {}[]) => { boxed: string; }'.
!!! error TS2345:   Types of parameters 'x2' and 'b1' are incompatible.
!!! error TS2345:     Type '{}[]' is not assignable to type 'string'.
        const expectedComposed4: <U>(u: U) => {boxed: U[]} = composed4;
        const callComposed4 = composed4("test");
        const expectedCallComposed4 : {boxed: string[]} = callComposed4;
    }
    
    {
        let composed5 = composeReverse( x2 => ({ boxed: x2 }), x => "" + x);
        const expectedComposed5: <U>(u: U) => [U, {boxed: string}] = composed5;
              ~~~~~~~~~~~~~~~~~
!!! error TS2322: Type '(d2: {}) => [{}, { boxed: string; }]' is not assignable to type '<U>(u: U) => [U, { boxed: string; }]'.
!!! error TS2322:   Type '[{}, { boxed: string; }]' is not assignable to type '[U, { boxed: string; }]'.
!!! error TS2322:     Type '{}' is not assignable to type 'U'.
        const callComposed5 = composed5(123456);
        const expectedCallComposed5 : [number, {boxed: string}] = callComposed5;
              ~~~~~~~~~~~~~~~~~~~~~
!!! error TS2322: Type '[{}, { boxed: string; }]' is not assignable to type '[number, { boxed: string; }]'.
!!! error TS2322:   Type '{}' is not assignable to type 'number'.
    }
    
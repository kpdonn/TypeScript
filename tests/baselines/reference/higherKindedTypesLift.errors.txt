tests/cases/compiler/higherKindedTypesLift.ts(45,35): error TS2345: Argument of type 'FunctorX<string>' is not assignable to parameter of type 'Functor<string, FunctorX<string>>'.
  Types of property 'map' are incompatible.
    Type '<BX>(f: (a: string) => BX) => FunctorX<BX>' is not assignable to type '<BF>(f: (a: string) => BF) => FunctorX<string>'.
      Type 'FunctorX<BF>' is not assignable to type 'FunctorX<string>'.
        Type 'BF' is not assignable to type 'string'.
tests/cases/compiler/higherKindedTypesLift.ts(65,41): error TS2345: Argument of type 'DiffFunctorY<string>' is not assignable to parameter of type 'Functor<string, DiffFunctorY<string>>'.
  Property 'map' is missing in type 'DiffFunctorY<string>'.
tests/cases/compiler/higherKindedTypesLift.ts(74,41): error TS2345: Argument of type 'InvalidFunctor<string>' is not assignable to parameter of type 'Functor<string, InvalidFunctor<string>>'.
  Types of property 'map' are incompatible.
    Type '<IB>(fi: (ia: string) => IB) => IB' is not assignable to type '<BF>(f: (a: string) => BF) => InvalidFunctor<string>'.
      Type 'BF' is not assignable to type 'InvalidFunctor<string>'.
tests/cases/compiler/higherKindedTypesLift.ts(86,41): error TS2345: Argument of type 'InvalidFunctor2<string>' is not assignable to parameter of type 'Functor<string, InvalidFunctor2<string>>'.
  Types of property 'map' are incompatible.
    Type '<IB2>(fi2: (ia2: string) => IB2) => FunctorX<IB2>' is not assignable to type '<BF>(f: (a: string) => BF) => InvalidFunctor2<string>'.
      Type 'FunctorX<BF>' is not assignable to type 'InvalidFunctor2<string>'.
        Property 'someUniqueMethod' is missing in type 'FunctorX<BF>'.


==== tests/cases/compiler/higherKindedTypesLift.ts (4 errors) ====
    export interface Functor<AF, Container<_TF>> {
        map<BF>(f: (a: AF) => BF): Container<BF>;
    }
    
    class FunctorX<AX> implements Functor<AX, FunctorX> {
        constructor(private elements: AX[]) {}
        map<BX>(f: (a: AX) => BX): FunctorX<BX> {
            const mappedElements = this.elements.map(f);
            return new FunctorX(mappedElements);
        }
    
        firstVal(): AX | undefined {
            return this.elements.length ? this.elements[0] : undefined;
        };
    }
    
    
    interface StaticFunctor<CS<_TS>> {
        <AS, BS>(csas: CS<AS>, fmapstatic: (as: AS) => BS): CS<BS>;
    }
    
    
    interface LiftedResult<LRC<_LT>> {
        <LRA, LRB>(lrmap: (lra: LRA) => LRB): <NC<_NT> extends LRC<_NT>>(lrclra: NC<LRA>) => NC<LRB>
    }
    
    function lift<C<_TL>>(fToLift: StaticFunctor<C>): LiftedResult<C> {
        return lmap => lca => fToLift(lca, lmap);
    }
    
    function staticMap<C1<_T1> extends Functor<_T1, C1>, A1, B1>(fa1: C1<A1>, fmap1: (a1: A1) => B1): C1<B1> {
        return fa1.map(fmap1);
    }
    
    const liftedFunctor = lift(staticMap);
    
    function stringLength(strarg: string): number {
        return strarg.length;
    }
    
    const liftedStringLength = liftedFunctor(stringLength);
    
    const functorXString = new FunctorX(["myFunctorX"]);
    
    const result = liftedStringLength(functorXString);
                                      ~~~~~~~~~~~~~~
!!! error TS2345: Argument of type 'FunctorX<string>' is not assignable to parameter of type 'Functor<string, FunctorX<string>>'.
!!! error TS2345:   Types of property 'map' are incompatible.
!!! error TS2345:     Type '<BX>(f: (a: string) => BX) => FunctorX<BX>' is not assignable to type '<BF>(f: (a: string) => BF) => FunctorX<string>'.
!!! error TS2345:       Type 'FunctorX<BF>' is not assignable to type 'FunctorX<string>'.
!!! error TS2345:         Type 'BF' is not assignable to type 'string'.
    const expectedType: FunctorX<number> = result;
    
    const expectError = liftedStringLength(result);
    
    
    
    export interface DiffFunctor<DA, DContainer<_TD>> {
        diffMap<DB>(df: (da: DA) => DB): DContainer<DB>;
    }
    
    declare class DiffFunctorY<AY> implements DiffFunctor<AY, DiffFunctorY> {
    
        diffMap<BY>(f: (a: AY) => BY): DiffFunctorY<BY>
    
        firstValY(): AY | undefined
    }
    
    declare const diffFunctorYString: DiffFunctorY<string>;
    // should have error because DiffFunctorY has diffMap function, not "map" as needed because liftedFunctor was created from staticMap which declared Functor
    const expectError2 = liftedStringLength(diffFunctorYString);
                                            ~~~~~~~~~~~~~~~~~~
!!! error TS2345: Argument of type 'DiffFunctorY<string>' is not assignable to parameter of type 'Functor<string, DiffFunctorY<string>>'.
!!! error TS2345:   Property 'map' is missing in type 'DiffFunctorY<string>'.
    
    
    declare class InvalidFunctor<IA> {
        // does not actually implement Functor because it doesn't return InvalidFunctor<IB>
        map<IB>(fi: (ia: IA) => IB): IB
    }
    
    declare const invalidFunctor: InvalidFunctor<string>;
    const expectError3 = liftedStringLength(invalidFunctor);
                                            ~~~~~~~~~~~~~~
!!! error TS2345: Argument of type 'InvalidFunctor<string>' is not assignable to parameter of type 'Functor<string, InvalidFunctor<string>>'.
!!! error TS2345:   Types of property 'map' are incompatible.
!!! error TS2345:     Type '<IB>(fi: (ia: string) => IB) => IB' is not assignable to type '<BF>(f: (a: string) => BF) => InvalidFunctor<string>'.
!!! error TS2345:       Type 'BF' is not assignable to type 'InvalidFunctor<string>'.
    
    
    
    declare class InvalidFunctor2<IA2> {
        // does not actually implement Functor because it doesn't return InvalidFunctor2<IB>
        map<IB2>(fi2: (ia2: IA2) => IB2): FunctorX<IB2>
    
        someUniqueMethod(): IA2
    }
    
    declare const invalidFunctor2: InvalidFunctor2<string>;
    const expectError4 = liftedStringLength(invalidFunctor2);
                                            ~~~~~~~~~~~~~~~
!!! error TS2345: Argument of type 'InvalidFunctor2<string>' is not assignable to parameter of type 'Functor<string, InvalidFunctor2<string>>'.
!!! error TS2345:   Types of property 'map' are incompatible.
!!! error TS2345:     Type '<IB2>(fi2: (ia2: string) => IB2) => FunctorX<IB2>' is not assignable to type '<BF>(f: (a: string) => BF) => InvalidFunctor2<string>'.
!!! error TS2345:       Type 'FunctorX<BF>' is not assignable to type 'InvalidFunctor2<string>'.
!!! error TS2345:         Property 'someUniqueMethod' is missing in type 'FunctorX<BF>'.
    